/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import {AnimationAction, AnimationUtils} from 'three'
import React, {useEffect, useRef, useState} from 'react'
import { useGLTF } from '@react-three/drei/useGLTF'

import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import {SkeletonUtils} from "three/examples/jsm/utils/SkeletonUtils";
import {setMaterials, setShadows} from "../../utils/models";
import {useAnimations} from "@react-three/drei";
import {useHandleAnimation} from "./useHandleAnimation";

type GLTFResult = GLTF & {
  nodes: {
    Chick_LOD0: THREE.SkinnedMesh
    Chick_LOD1: THREE.SkinnedMesh
    Chick_LOD2: THREE.SkinnedMesh
    Chick_LOD3: THREE.SkinnedMesh
    root: THREE.Bone
  }
  materials: {
    Mat_Chick: THREE.MeshStandardMaterial
  }
}

type ActionName = 'Idle' | 'Walk'
export type GLTFActions = Record<ActionName, AnimationAction>

export default function Animal({animal, idleEndFrame, moving = false, timeScale, ...props}: JSX.IntrinsicElements['group'] & { animal: string, idleEndFrame: number, timeScale: number, moving?: boolean }) {

  const group = useRef<THREE.Group>()
  const { scene } = useGLTF(`/models/${animal}_LOD3.gltf`) as GLTFResult
  const { animations: idleAnimations } = useGLTF(`/models/${animal}_Idle.gltf`) as GLTF
  const { animations: walkAnimations } = useGLTF(`/models/${animal}_Walk.gltf`) as GLTF
    const [animations] = useState(() => {
        let animations = []
        if (idleAnimations[0]) {
            const subIdleClip = AnimationUtils.subclip(idleAnimations[0], 'Idle', 0, idleEndFrame)
            animations.push(subIdleClip)
        }
        animations.push(...walkAnimations)
        return animations
    })

    // @ts-ignore
    const { actions } = useAnimations(animations, group) as { actions: GLTFActions}
    useHandleAnimation(actions, moving, timeScale)

    const [cloned]: any = useState(() => {
        const clonedScene = SkeletonUtils.clone(scene)
        setMaterials(clonedScene)
        setShadows(clonedScene)
        return clonedScene
    })

  return (
    <group ref={group} {...props} rotation={[Math.PI / 2, 0, 0]} dispose={null}>
        <primitive object={cloned} dispose={null} />
    </group>
  )
}
